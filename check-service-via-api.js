// Script para verificar el servicio de prueba a trav√©s del API
const https = require('https');
const http = require('http');

async function checkServiceViaAPI() {
  try {
    console.log('üîç Verificando servicio de prueba a trav√©s del API...');
    
    // Funci√≥n para hacer petici√≥n HTTP
    const makeRequest = (url) => {
      return new Promise((resolve, reject) => {
        const protocol = url.startsWith('https') ? https : http;
        
        protocol.get(url, (res) => {
          let data = '';
          
          res.on('data', (chunk) => {
            data += chunk;
          });
          
          res.on('end', () => {
            try {
              const jsonData = JSON.parse(data);
              resolve({ status: res.statusCode, data: jsonData });
            } catch (error) {
              resolve({ status: res.statusCode, data: data });
            }
          });
        }).on('error', (error) => {
          reject(error);
        });
      });
    };
    
    // Verificar servicios en producci√≥n
    console.log('\nüì° Consultando API de producci√≥n...');
    const prodResponse = await makeRequest('https://www.tubarrio.pe/api/services');
    console.log('Status:', prodResponse.status);
    
    if (prodResponse.status === 200 && Array.isArray(prodResponse.data)) {
      console.log('‚úÖ API funcionando, servicios encontrados:', prodResponse.data.length);
      
      // Buscar servicio de prueba
      const testService = prodResponse.data.find(service => 
        service.name && service.name.toLowerCase().includes('prueba')
      );
      
      if (testService) {
        console.log('\nüéØ Servicio de prueba encontrado:');
        console.log('  - ID:', testService.id);
        console.log('  - Nombre:', testService.name);
        console.log('  - Descripci√≥n:', testService.description);
        console.log('  - Direcci√≥n (address):', testService.address);
        console.log('  - Referencia (reference):', testService.reference);
        console.log('  - Location:', testService.location);
        console.log('  - Imagen principal:', testService.image);
        console.log('  - Im√°genes array:', testService.images);
        console.log('  - Activo:', testService.active);
        
        console.log('\nüîç An√°lisis de problemas:');
        
        // Problema 1: Im√°genes
        if (!testService.image || testService.image === 'none' || testService.image === '') {
          console.log('‚ùå PROBLEMA: Imagen principal no v√°lida');
        } else {
          console.log('‚úÖ Imagen principal OK');
        }
        
        if (!testService.images || testService.images.length === 0 || testService.images[0] === 'none') {
          console.log('‚ùå PROBLEMA: Array de im√°genes vac√≠o o inv√°lido');
        } else {
          console.log('‚úÖ Array de im√°genes OK');
        }
        
        // Problema 2: Direcci√≥n y referencia
        console.log('\nüìç An√°lisis de ubicaci√≥n:');
        console.log('  - address:', testService.address || 'NO DEFINIDO');
        console.log('  - reference:', testService.reference || 'NO DEFINIDO');
        console.log('  - location:', testService.location || 'NO DEFINIDO');
        
        if (testService.address && testService.reference) {
          if (testService.address === testService.reference) {
            console.log('‚ùå PROBLEMA: address y reference son iguales');
          } else {
            console.log('‚úÖ address y reference son diferentes');
          }
        }
        
      } else {
        console.log('‚ùå No se encontr√≥ servicio de prueba');
        
        // Mostrar algunos servicios para referencia
        console.log('\nüìã Primeros 5 servicios disponibles:');
        prodResponse.data.slice(0, 5).forEach((service, index) => {
          console.log(`  ${index + 1}. ${service.name} (ID: ${service.id})`);
        });
      }
    } else {
      console.log('‚ùå Error en API o respuesta inv√°lida');
      console.log('Respuesta:', prodResponse.data);
    }
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  }
}

checkServiceViaAPI();